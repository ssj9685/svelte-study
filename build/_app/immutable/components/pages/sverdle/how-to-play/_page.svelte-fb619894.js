import { S as SvelteComponent, i as init, s as safe_not_equal, k as element, a as space, q as text, Q as head_selector, l as claim_element, h as detach, c as claim_space, m as children, r as claim_text, n as attr, G as append_hydration, b as insert_hydration, C as noop } from "../../../../chunks/index-d985765e.js";
const _page_svelte_svelte_type_style_lang = "";
function create_fragment(ctx) {
  let meta;
  let t0;
  let div2;
  let h1;
  let t1;
  let t2;
  let p0;
  let t3;
  let a;
  let t4;
  let t5;
  let t6;
  let div0;
  let span0;
  let t7;
  let t8;
  let span1;
  let t9;
  let t10;
  let span2;
  let t11;
  let t12;
  let span3;
  let t13;
  let t14;
  let span4;
  let t15;
  let t16;
  let p1;
  let t17;
  let span5;
  let t18;
  let t19;
  let span6;
  let t20;
  let t21;
  let span7;
  let t22;
  let t23;
  let t24;
  let div1;
  let span8;
  let t25;
  let t26;
  let span9;
  let t27;
  let t28;
  let span10;
  let t29;
  let t30;
  let span11;
  let t31;
  let t32;
  let span12;
  let t33;
  let t34;
  let p2;
  let t35;
  let strong;
  let t36;
  let t37;
  let t38;
  let p3;
  let t39;
  let code;
  let t40;
  let t41;
  return {
    c() {
      meta = element("meta");
      t0 = space();
      div2 = element("div");
      h1 = element("h1");
      t1 = text("How to play Sverdle");
      t2 = space();
      p0 = element("p");
      t3 = text("Sverdle is a clone of ");
      a = element("a");
      t4 = text("Wordle");
      t5 = text(", the\n		word guessing game. To play, enter a five-letter English word. For example:");
      t6 = space();
      div0 = element("div");
      span0 = element("span");
      t7 = text("r");
      t8 = space();
      span1 = element("span");
      t9 = text("i");
      t10 = space();
      span2 = element("span");
      t11 = text("t");
      t12 = space();
      span3 = element("span");
      t13 = text("z");
      t14 = space();
      span4 = element("span");
      t15 = text("y");
      t16 = space();
      p1 = element("p");
      t17 = text("The ");
      span5 = element("span");
      t18 = text("y");
      t19 = text(" is in the right place. ");
      span6 = element("span");
      t20 = text("r");
      t21 = text(" and\n		");
      span7 = element("span");
      t22 = text("t");
      t23 = text("\n		are the right letters, but in the wrong place. The other letters are wrong, and can be discarded.\n		Let's make another guess:");
      t24 = space();
      div1 = element("div");
      span8 = element("span");
      t25 = text("p");
      t26 = space();
      span9 = element("span");
      t27 = text("a");
      t28 = space();
      span10 = element("span");
      t29 = text("r");
      t30 = space();
      span11 = element("span");
      t31 = text("t");
      t32 = space();
      span12 = element("span");
      t33 = text("y");
      t34 = space();
      p2 = element("p");
      t35 = text("This time we guessed right! You have ");
      strong = element("strong");
      t36 = text("six");
      t37 = text(" guesses to get the word.");
      t38 = space();
      p3 = element("p");
      t39 = text("Unlike the original Wordle, Sverdle runs on the server instead of in the browser, making it\n		impossible to cheat. It uses ");
      code = element("code");
      t40 = text("<form>");
      t41 = text(" and cookies to submit data, meaning you can\n		even play with JavaScript disabled!");
      this.h();
    },
    l(nodes) {
      const head_nodes = head_selector("svelte-1fqqyy5", document.head);
      meta = claim_element(head_nodes, "META", { name: true, content: true });
      head_nodes.forEach(detach);
      t0 = claim_space(nodes);
      div2 = claim_element(nodes, "DIV", { class: true });
      var div2_nodes = children(div2);
      h1 = claim_element(div2_nodes, "H1", {});
      var h1_nodes = children(h1);
      t1 = claim_text(h1_nodes, "How to play Sverdle");
      h1_nodes.forEach(detach);
      t2 = claim_space(div2_nodes);
      p0 = claim_element(div2_nodes, "P", {});
      var p0_nodes = children(p0);
      t3 = claim_text(p0_nodes, "Sverdle is a clone of ");
      a = claim_element(p0_nodes, "A", { href: true });
      var a_nodes = children(a);
      t4 = claim_text(a_nodes, "Wordle");
      a_nodes.forEach(detach);
      t5 = claim_text(p0_nodes, ", the\n		word guessing game. To play, enter a five-letter English word. For example:");
      p0_nodes.forEach(detach);
      t6 = claim_space(div2_nodes);
      div0 = claim_element(div2_nodes, "DIV", { class: true });
      var div0_nodes = children(div0);
      span0 = claim_element(div0_nodes, "SPAN", { class: true });
      var span0_nodes = children(span0);
      t7 = claim_text(span0_nodes, "r");
      span0_nodes.forEach(detach);
      t8 = claim_space(div0_nodes);
      span1 = claim_element(div0_nodes, "SPAN", { class: true });
      var span1_nodes = children(span1);
      t9 = claim_text(span1_nodes, "i");
      span1_nodes.forEach(detach);
      t10 = claim_space(div0_nodes);
      span2 = claim_element(div0_nodes, "SPAN", { class: true });
      var span2_nodes = children(span2);
      t11 = claim_text(span2_nodes, "t");
      span2_nodes.forEach(detach);
      t12 = claim_space(div0_nodes);
      span3 = claim_element(div0_nodes, "SPAN", { class: true });
      var span3_nodes = children(span3);
      t13 = claim_text(span3_nodes, "z");
      span3_nodes.forEach(detach);
      t14 = claim_space(div0_nodes);
      span4 = claim_element(div0_nodes, "SPAN", { class: true });
      var span4_nodes = children(span4);
      t15 = claim_text(span4_nodes, "y");
      span4_nodes.forEach(detach);
      div0_nodes.forEach(detach);
      t16 = claim_space(div2_nodes);
      p1 = claim_element(div2_nodes, "P", { class: true });
      var p1_nodes = children(p1);
      t17 = claim_text(p1_nodes, "The ");
      span5 = claim_element(p1_nodes, "SPAN", { class: true });
      var span5_nodes = children(span5);
      t18 = claim_text(span5_nodes, "y");
      span5_nodes.forEach(detach);
      t19 = claim_text(p1_nodes, " is in the right place. ");
      span6 = claim_element(p1_nodes, "SPAN", { class: true });
      var span6_nodes = children(span6);
      t20 = claim_text(span6_nodes, "r");
      span6_nodes.forEach(detach);
      t21 = claim_text(p1_nodes, " and\n		");
      span7 = claim_element(p1_nodes, "SPAN", { class: true });
      var span7_nodes = children(span7);
      t22 = claim_text(span7_nodes, "t");
      span7_nodes.forEach(detach);
      t23 = claim_text(p1_nodes, "\n		are the right letters, but in the wrong place. The other letters are wrong, and can be discarded.\n		Let's make another guess:");
      p1_nodes.forEach(detach);
      t24 = claim_space(div2_nodes);
      div1 = claim_element(div2_nodes, "DIV", { class: true });
      var div1_nodes = children(div1);
      span8 = claim_element(div1_nodes, "SPAN", { class: true });
      var span8_nodes = children(span8);
      t25 = claim_text(span8_nodes, "p");
      span8_nodes.forEach(detach);
      t26 = claim_space(div1_nodes);
      span9 = claim_element(div1_nodes, "SPAN", { class: true });
      var span9_nodes = children(span9);
      t27 = claim_text(span9_nodes, "a");
      span9_nodes.forEach(detach);
      t28 = claim_space(div1_nodes);
      span10 = claim_element(div1_nodes, "SPAN", { class: true });
      var span10_nodes = children(span10);
      t29 = claim_text(span10_nodes, "r");
      span10_nodes.forEach(detach);
      t30 = claim_space(div1_nodes);
      span11 = claim_element(div1_nodes, "SPAN", { class: true });
      var span11_nodes = children(span11);
      t31 = claim_text(span11_nodes, "t");
      span11_nodes.forEach(detach);
      t32 = claim_space(div1_nodes);
      span12 = claim_element(div1_nodes, "SPAN", { class: true });
      var span12_nodes = children(span12);
      t33 = claim_text(span12_nodes, "y");
      span12_nodes.forEach(detach);
      div1_nodes.forEach(detach);
      t34 = claim_space(div2_nodes);
      p2 = claim_element(div2_nodes, "P", {});
      var p2_nodes = children(p2);
      t35 = claim_text(p2_nodes, "This time we guessed right! You have ");
      strong = claim_element(p2_nodes, "STRONG", {});
      var strong_nodes = children(strong);
      t36 = claim_text(strong_nodes, "six");
      strong_nodes.forEach(detach);
      t37 = claim_text(p2_nodes, " guesses to get the word.");
      p2_nodes.forEach(detach);
      t38 = claim_space(div2_nodes);
      p3 = claim_element(div2_nodes, "P", {});
      var p3_nodes = children(p3);
      t39 = claim_text(p3_nodes, "Unlike the original Wordle, Sverdle runs on the server instead of in the browser, making it\n		impossible to cheat. It uses ");
      code = claim_element(p3_nodes, "CODE", {});
      var code_nodes = children(code);
      t40 = claim_text(code_nodes, "<form>");
      code_nodes.forEach(detach);
      t41 = claim_text(p3_nodes, " and cookies to submit data, meaning you can\n		even play with JavaScript disabled!");
      p3_nodes.forEach(detach);
      div2_nodes.forEach(detach);
      this.h();
    },
    h() {
      document.title = "How to play Sverdle";
      attr(meta, "name", "description");
      attr(meta, "content", "How to play Sverdle");
      attr(a, "href", "https://www.nytimes.com/games/wordle/index.html");
      attr(span0, "class", "close svelte-1x5nq1n");
      attr(span1, "class", "missing svelte-1x5nq1n");
      attr(span2, "class", "close svelte-1x5nq1n");
      attr(span3, "class", "missing svelte-1x5nq1n");
      attr(span4, "class", "exact svelte-1x5nq1n");
      attr(div0, "class", "example svelte-1x5nq1n");
      attr(span5, "class", "exact svelte-1x5nq1n");
      attr(span6, "class", "close svelte-1x5nq1n");
      attr(span7, "class", "close svelte-1x5nq1n");
      attr(p1, "class", "svelte-1x5nq1n");
      attr(span8, "class", "exact svelte-1x5nq1n");
      attr(span9, "class", "exact svelte-1x5nq1n");
      attr(span10, "class", "exact svelte-1x5nq1n");
      attr(span11, "class", "exact svelte-1x5nq1n");
      attr(span12, "class", "exact svelte-1x5nq1n");
      attr(div1, "class", "example svelte-1x5nq1n");
      attr(div2, "class", "text-column");
    },
    m(target, anchor) {
      append_hydration(document.head, meta);
      insert_hydration(target, t0, anchor);
      insert_hydration(target, div2, anchor);
      append_hydration(div2, h1);
      append_hydration(h1, t1);
      append_hydration(div2, t2);
      append_hydration(div2, p0);
      append_hydration(p0, t3);
      append_hydration(p0, a);
      append_hydration(a, t4);
      append_hydration(p0, t5);
      append_hydration(div2, t6);
      append_hydration(div2, div0);
      append_hydration(div0, span0);
      append_hydration(span0, t7);
      append_hydration(div0, t8);
      append_hydration(div0, span1);
      append_hydration(span1, t9);
      append_hydration(div0, t10);
      append_hydration(div0, span2);
      append_hydration(span2, t11);
      append_hydration(div0, t12);
      append_hydration(div0, span3);
      append_hydration(span3, t13);
      append_hydration(div0, t14);
      append_hydration(div0, span4);
      append_hydration(span4, t15);
      append_hydration(div2, t16);
      append_hydration(div2, p1);
      append_hydration(p1, t17);
      append_hydration(p1, span5);
      append_hydration(span5, t18);
      append_hydration(p1, t19);
      append_hydration(p1, span6);
      append_hydration(span6, t20);
      append_hydration(p1, t21);
      append_hydration(p1, span7);
      append_hydration(span7, t22);
      append_hydration(p1, t23);
      append_hydration(div2, t24);
      append_hydration(div2, div1);
      append_hydration(div1, span8);
      append_hydration(span8, t25);
      append_hydration(div1, t26);
      append_hydration(div1, span9);
      append_hydration(span9, t27);
      append_hydration(div1, t28);
      append_hydration(div1, span10);
      append_hydration(span10, t29);
      append_hydration(div1, t30);
      append_hydration(div1, span11);
      append_hydration(span11, t31);
      append_hydration(div1, t32);
      append_hydration(div1, span12);
      append_hydration(span12, t33);
      append_hydration(div2, t34);
      append_hydration(div2, p2);
      append_hydration(p2, t35);
      append_hydration(p2, strong);
      append_hydration(strong, t36);
      append_hydration(p2, t37);
      append_hydration(div2, t38);
      append_hydration(div2, p3);
      append_hydration(p3, t39);
      append_hydration(p3, code);
      append_hydration(code, t40);
      append_hydration(p3, t41);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      detach(meta);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div2);
    }
  };
}
class Page extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment, safe_not_equal, {});
  }
}
export {
  Page as default
};
